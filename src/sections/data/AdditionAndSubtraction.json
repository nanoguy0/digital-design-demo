{
    "Binary Addition (Unsigned)": "## Binary Addition (Unsigned)\r\n- Perform one column at a time, working from right to left.\r\n- Possible cases:\r\n  - 0 + 0 = 0\r\n  - 1 + 0 = 1 (and vice versa)\r\n  - 1 + 1 = 10 in binary (0 sum bit, 1 carry-out)\r\n- When adding three bits (including carry-in):\r\n  - 1 + 1 + 1 = 11 in binary (1 sum bit, 1 carry-out)\r\n### Video Example:\r\n- Augend = 11 (in binary: 1011)\r\n- Addend = 14 (in binary: 1110)\r\n- Sum    = 25 (in binary: 11001)\r\n  - Drop sum bit, carry over the carry bit to the next left column.\r\n  - Final carry-out (leftmost bit) is written outside the normal bit range.\r\n  ",
    "Binary Addition (Signed)": "## Binary Addition (Signed)\r\n- Use two's complement form with correct bit numbers (pad with zeros for 8 bits).\r\n- Discard final carry-out for operations within the bit size (discard the 9th bit in 8-bit addition).\r\n- Check for overflows, where values exceed the representable range.\r\n  - 8-bit two's complement range: -128 to +127\r\n### Overflow\r\n- Overflows occur when the magnitude of a value exceeds the representable range in a given number of bits.\r\n- All values (inputs and outputs) must fit the representable range for a calculation to be correct.\r\n- More bits per variable mean a greater range but require more memory.\r\n### Video Examples:\r\n- 8-bit addition to add decimal -5 and +34.\r\n  - Convert decimals to binary two's complement form.\r\n    - Positive 5 in binary: 00000101\r\n    - Negative 5 in binary: invert and add 1 (11111011)\r\n    - Decimal 34 in binary: 00100010 (no negation needed)\r\n  - Adding these values:\r\n    - Follow binary addition rules, carry over where necessary.\r\n    - Discard any final carry-out.\r\n    - Result is 29 in decimal (binary: 00011101)\r\n\r\n- Adding positive 108 and positive 34 provides an incorrect result because the sum exceeds the 8-bit maximum.\r\n  - The incorrect sum in binary appears as a negative number, which is a sign of overflow.\r\n",
    "Long Hand Subtraction": "## Long Hand Subtraction\r\n- Similar to learning long hand subtraction in decimal.\r\n- Involves borrowing from the next column.\r\n- In decimal, a borrow from a zero requires carrying a 10 into that column after temporarily holding a value of -1.\r\n- In binary, borrowing works the same, but the carry is weighted as 2.\r\n\r\n\r\n### Example in Binary\r\n\\`\\`\\`\r\n  0   1   10\r\n  0 1 1 1 10\r\n-   1 1 1  1\r\n____________\r\n1 0 1 1  0\r\n\\`\\`\\`\r\n- 0 minus 1 requires a carry (borrowing 2 in binary, written as '10').\r\n- Temporarily holding -1 and adding the carry changes the value.\r\n- Final subtraction in each column is done after all borrows are completed.\r\n",
    "Adding Negative Number": "## Adding Negative Number\r\n**(Two's Complement Method)**\r\n- Two's complement operation simplifies negation of numbers.\r\n- Easier for humans and for building circuits compared to longhand subtraction.\r\n- Adding two's complement binary numbers is straightforward.\r\n\r\n### Example: \r\nDecimal -3 and -7 in Binary\r\n1. Convert to binary two's complement form.\r\n2. Simply add the two numbers together.\r\n3. The answer, after conversion back, equals the expected decimal result."
}